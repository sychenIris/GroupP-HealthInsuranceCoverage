# BEA regions
demographics1$BEA_region <- ""
demographics1$BEA_region[demographics1$state_abb %in% c("ME", "NH", "VT", "MA", "CT", "RI")] <- "New England"
demographics1$BEA_region[demographics1$state_abb %in% c("NY", "NJ", "PA", "MD", "DE")] <- "Mideast"
demographics1$BEA_region[demographics1$state_abb %in% c("WI", "IL", "MI", "IN", "OH")] <- "Great Lakes"
demographics1$BEA_region[demographics1$state_abb %in% c("WV", "KY", "VA", "TN", "NC", "SC", "AR", "LA", "MS", "AL", "GA", "FL")] <- "Southeast"
demographics1$BEA_region[demographics1$state_abb %in% c("ND", "SD", "NE", "KS", "MN", "IA", "MO")] <- "Plains"
demographics1$BEA_region[demographics1$state_abb %in% c("MT", "ID", "WY", "UT", "CO")] <- "Rocky Mountains"
demographics1$BEA_region[demographics1$state_abb %in% c("AZ", "NM", "TX", "OK")] <- "Southwest"
demographics1$BEA_region[demographics1$state_abb %in% c("WA", "OR", "CA", "NV", "AK", "HI")] <- "Far West"
# Tag income level (category)
demographics1$income_level <- ""
demographics1$income_level[demographics1$income >= 60000] <- "High"
demographics1$income_level[demographics1$income >= 50000 & demographics1$income < 60000] <- "Upper Middle"
demographics1$income_level[demographics1$income >= 45000 & demographics1$income < 50000] <- "Lower Middle"
demographics1$income_level[demographics1$income < 45000] <- "Low"
# Convert to factor variable
demographics1$income_level <- factor(demographics1$income_level, levels = c("Low", "Lower Middle", "Upper Middle", "High"))
## CLEAN DEMOGRAPHIC (2) DATA
colnames(demographics2) <- demographics2[2, ]
# Drop first few rows (non-observations)
demographics2 <- demographics2[-(1:2), ]
# Drop county-level data,  keep state-level data only
demographics2 <- demographics2[demographics2$Area_Name == "United States" | demographics2$State != lag(demographics2$State), ]
# Keep only columns of population from 2010 to 2015
demographics2 <- demographics2[ , c("State", "Area_Name", "POP_ESTIMATE_2010", "POP_ESTIMATE_2011", "POP_ESTIMATE_2012", "POP_ESTIMATE_2013", "POP_ESTIMATE_2014", "POP_ESTIMATE_2015")]
# Change format of variables
# To character variable
for (j in c(3:8)) {
demographics2[[j]] <- as.numeric(demographics2[[j]])
}
# Rename variables
colnames(demographics2) <- c("state_abb", "state", "population_2010", "population_2011", "population_2012", "population_2013", "population_2014", "population_2015")
## CLEAN ELECTION DATA
# Keep only 2012 and 2008 data, and data for the 50 states
election <- election[ 4:53 , c("X0", "X5", "X6", "X9", "X10")]
# Rename variables
colnames(election) <- c("state", "Dem_pct_2012", "Rep_pct_2012", "Dem_pct_2008", "Rep_pct_2008")
# Add state abbreviations
# Match with look-up table
election$state_abb <- state_abb_lookup$state_abb[match(election$state, state_abb_lookup$state)]
# Change format of variables
# To numeric variable
for (j in c(4:6)) {
election[[j]] <- as.numeric(election[[j]])
}
# Calculate winning party for each state
election$party_2012 <- ifelse(election$Dem_pct_2012 > election$Rep_pct_2012, "Democratic", "Republican")
election$party_2008 <- ifelse(election$Dem_pct_2008 > election$Rep_pct_2008, "Democratic", "Republican")
# Reorder variables
election <- election[ , c("state", "state_abb", "Dem_pct_2012", "Rep_pct_2012", "party_2012", "Dem_pct_2008", "Rep_pct_2008", "party_2008")]
## SOME DATA PREPARATION
# Look-up information into insurance and insurance_long, on:
# Party (2012)
insurance_long$party_2012 <- election$party_2012[match(insurance_long$state, election$state)]
insurance$party_2012 <- election$party_2012[match(insurance$state, election$state)]
# BEA region
insurance_long$BEA_region <- demographics1$BEA_region[match(insurance_long$state, demographics1$state)]
insurance$BEA_region <- demographics1$BEA_region[match(insurance$state, demographics1$state)]
# Income level
insurance_long$income_level <- demographics1$income_level[match(insurance_long$state, demographics1$state)]
insurance$income_level <- demographics1$income_level[match(insurance$state, demographics1$state)]
# Also find nation-wide trend for insurance
insurance_long_US <- data.frame("year" = c(2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015), "uninsured_pct" = c(16.8, 17.5, 18.2, 17.2, 16.9, 16.6, 13.3, 10.5))
## PLOT 2
plot1 <- (ggplot(insurance_long, aes(year, uninsured_pct))
+ geom_line(aes(color = BEA_region, group = state, label = uninsured_num))
+ scale_x_continuous(breaks = c(2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015))
+ scale_y_continuous(breaks = c(5, 10, 15, 20, 25, 30))
+ labs(x = "Year", y = "% Uninsured", color = "Region")
+ geom_line(data = insurance_long_US, lwd = 0.8)
+ geom_vline(xintercept = 2010, linetype = 2, color = "gray30")
+ geom_vline(xintercept = 2014, linetype = 2, color = "gray30")
+ annotate("text",x = 2009.4, y = 25, label = "Obama \nsigns ACA", color = "black",fontface = 2, size = 3)
+ annotate("text",x = 2013.4, y = 24.5, label = "Most ACA \nprovisions \ntake effect", color = "black",fontface = 2, size = 3)
+ annotate("text",x = 2014.2, y = 11, label = "USA \nAverage", color = "black",fontface = 2, size = 3)
+ ggtitle("Change in Percentage Uninsured by State, \nfrom 2008 to 2015")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12)))
ggplotly(plot1, dynamicTicks = FALSE, tooltip = c("state", "year", "uninsured_pct", "uninsured_num"))
## PROCESS PLOT
plot1b <- (ggplot(insurance_long, aes(year, uninsured_pct))
+ geom_violin(scale = "area", aes(group = year), fill = "blue", color = NA)
+ scale_x_continuous(breaks = c(2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015))
+ scale_y_continuous(breaks = c(5, 10, 15, 20, 25, 30))
+ labs(x = "Year", y = "% Uninsured", color = "Region")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12)))
plot1b
## PLOT 3
plot2 <- (ggplot(insurance_long, aes(year, uninsured_pct))
+ geom_line(aes(color = party_2012, group = state, label = uninsured_num))
+ scale_x_continuous(breaks = c(2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015))
+ scale_y_continuous(breaks = c(5, 10, 15, 20, 25, 30))
+ scale_color_manual(values = c("steel blue", "firebrick1"))
+ labs(x = "Year", y = "% Uninsured", color = "Party \n(2012 Winner)")
+ geom_line(data = insurance_long_US, lwd = 1)
+ geom_vline(xintercept = 2010, linetype = 2, color = "gray30")
+ geom_vline(xintercept = 2014, linetype = 2, color = "gray30")
+ annotate("text",x = 2009.4, y = 25, label = "Obama \nsigns ACA", color = "black",fontface = 2, size = 3)
+ annotate("text",x = 2013.4, y = 24.5, label = "Most ACA \nprovisions \ntake effect", color = "black",fontface = 2, size = 3)
+ annotate("text",x = 2014.2, y = 11, label = "USA \nAverage", color = "black",fontface = 2, size = 3)
+ ggtitle("Change in Percentage Uninsured by Party, \nfrom 2008 to 2015")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12)))
ggplotly(plot2, dynamicTicks = FALSE,  tooltip = c("state", "year", "uninsured_pct", "uninsured_num"))
insurance$unins_pct_decr_10_15 <- insurance$uninsured_pct_2010 - insurance$uninsured_pct_2015
insurance$unins_num_decr_10_15 <- insurance$uninsured_num_2010 - insurance$uninsured_num_2015
## Figure X
plot2b <- (ggplot(insurance, aes(x = reorder(state, unins_pct_decr_10_15), y = unins_pct_decr_10_15, fill = party_2012, label = unins_num_decr_10_15))
+ geom_col()
+ coord_flip()
+ labs(x = "", y = "Decrease in % Uninsured", fill = "Party \n(2012 Winner)")
+ scale_fill_manual(values = c("steel blue", "firebrick1"))
+ ggtitle("Decrease in in Percentage Uninsured from 2010 to 2015")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12), axis.text.y = element_text(size = 6.5))
)
ggplotly(plot2b, dynamicTicks = FALSE,  tooltip = c("unins_pct_decr_10_15", "unins_num_decr_10_15"))
## PLOT 4
# Subset relevant variables
insurance_2010_2015 <- insurance[ , c("state", "insured_pct_2010", "unins_pct_decr_10_15", "insured_pct_2015", "party_2012", "BEA_region", "income_level")]
names(insurance_2010_2015)[names(insurance_2010_2015)=="unins_pct_decr_10_15"] <- "ins_pct_incr_10_15"
# Boxplots by party
plot3a <- (ggplot(insurance_2010_2015, aes(x = reorder(party_2012, insured_pct_2015), y = insured_pct_2015))
+ geom_boxplot(aes(fill = party_2012, label = insured_pct_2015), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = c("steel blue", "firebrick"))
+ ggtitle("Democratic vs. Republican States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.37, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by BEA region
plot3b <- (ggplot(insurance_2010_2015, aes(x = reorder(BEA_region, insured_pct_2015), y = insured_pct_2015))
+ geom_boxplot(aes(fill = BEA_region, label = insured_pct_2015), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 8, name = "Dark2"))
+ ggtitle("By Bureau of Economic Analysis (BEA) Region")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.24, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by income level
plot3c <- (ggplot(insurance_2010_2015, aes(x = income_level, y = insured_pct_2015))
+ geom_boxplot(aes(fill = income_level, label = insured_pct_2015), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ labs(x = "", y = "% Insured (2015)")
+ ggtitle("By State's Income Level")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.39, size = 12), legend.position = "none", axis.title.y = element_blank()))
# Combine plots vertically
grid.arrange(plot3a, plot3b, plot3c, nrow = 3, top = "2015 Insurance Rates at a Glance")
# PROCESS PLOT
# Boxplots by party
plot3a1 <- (ggplot(insurance_2010_2015, aes(x = reorder(party_2012, insured_pct_2010), y = insured_pct_2010))
+ geom_boxplot(aes(fill = party_2012, label = insured_pct_2010), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = c("steel blue", "firebrick"))
+ ggtitle("Democratic vs. Republican States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.37, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by BEA region
plot3b1 <- (ggplot(insurance_2010_2015, aes(x = reorder(BEA_region, insured_pct_2010), y = insured_pct_2010))
+ geom_boxplot(aes(fill = BEA_region, label = insured_pct_2010), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 8, name = "Dark2"))
+ ggtitle("By Bureau of Economic Analysis (BEA) Region")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.24, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by income level
plot3c1 <- (ggplot(insurance_2010_2015, aes(x = income_level, y = insured_pct_2010))
+ geom_boxplot(aes(fill = income_level, label = insured_pct_2010), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ labs(x = "", y = "% Insured (2015)")
+ ggtitle("By State's Income Level")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.39, size = 12), legend.position = "none", axis.title.y = element_blank()))
# Combine plots vertically
grid.arrange(plot3a1, plot3b1, plot3c1, nrow = 3, top = "2010 Insurance Rates at a Glance")
# Boxplots by party
plot3a2 <- (ggplot(insurance_2010_2015, aes(x = reorder(party_2012, ins_pct_incr_10_15), y = ins_pct_incr_10_15))
+ geom_boxplot(aes(fill = party_2012, label = ins_pct_incr_10_15), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = c("steel blue", "firebrick"))
+ ggtitle("Democratic vs. Republican States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.37, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by BEA region
plot3b2 <- (ggplot(insurance_2010_2015, aes(x = reorder(BEA_region, ins_pct_incr_10_15), y = ins_pct_incr_10_15))
+ geom_boxplot(aes(fill = BEA_region, label = ins_pct_incr_10_15), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 8, name = "Dark2"))
+ ggtitle("By Bureau of Economic Analysis (BEA) Region")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.24, size = 12), legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank()))
# Boxplots by income level
plot3c2 <- (ggplot(insurance_2010_2015, aes(x = income_level, y = ins_pct_incr_10_15))
+ geom_boxplot(aes(fill = income_level, label = ins_pct_incr_10_15), color = "gray30")
+ coord_flip()
+ scale_fill_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ labs(x = "", y = "Increase in % Insured")
+ ggtitle("By State's Income Level")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.39, size = 12), legend.position = "none", axis.title.y = element_blank()))
# Combine plots vertically
grid.arrange(plot3a2, plot3b2, plot3c2, nrow = 3, top = "Increase in Percentage Insured (2010-2015) at a Glance")
## SOME DATA RESHAPING
# Reshape aca_general (long), keeping the interesting quantities
# Import uninsured number (2015)
aca_general$unins_all_15 <- insurance$uninsured_num_2015[match(aca_general$state, insurance$state)]
# Keep only select variables
aca_general_long <- aca_general[ , c("state", "state_abb", "cov_emp", "cov_mkt_plan_16", "medicaid_enroll_16", "medicare_enroll_16", "unins_all_15")]
# The actual reshaping
aca_general_long <- reshape(aca_general_long,
varying = c("cov_emp", "cov_mkt_plan_16", "medicaid_enroll_16", "medicare_enroll_16", "unins_all_15"),
v.names = "Number",
timevar = "Source",
times = c("Employer", "Marketplace", "Medicaid / CHIP", "Medicare", "Uninsured"),
new.row.names = 1:1000,
direction = "long")
# Look-up information into aca_general_long, on:
# Party (2012)
aca_general_long$party_2012 <- election$party_2012[match(aca_general_long$state, election$state)]
# BEA region
aca_general_long$BEA_region <- demographics1$BEA_region[match(aca_general_long$state, demographics1$state)]
# Income level
aca_general_long$income_level <- demographics1$income_level[match(aca_general_long$state, demographics1$state)]
# Population
aca_general_long$population_2015 <- demographics2$population_2015[match(aca_general_long$state, demographics2$state)]
# Calculate percentage from number and population
aca_general_long$percentage <- aca_general_long$Number / aca_general_long$population_2015 * 100
## PLOT 5
aca_general_long_by_party_income <- ddply(aca_general_long, c("party_2012", "income_level", "Source"), summarise, avg_pct = mean(percentage))
aca_general_long_by_party_income$avg_pct <- round(aca_general_long_by_party_income$avg_pct, digits = 1)
plot4 <- (ggplot(aca_general_long_by_party_income, aes(income_level, avg_pct, fill = Source))
+ geom_col(position = "dodge") + facet_grid(party_2012 ~ .)
+ labs(x = "Income Level", y = "Average % in State", color = "Source of \nInsurance")
+ scale_fill_manual(values = brewer.pal(n = 6, name = "Dark2")[c(1:3,6,4)])
+ ggtitle("Sources of Health Insurance, \nby Party and Income Level")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12)))
ggplotly(plot4, tooltip = c("income_level", "Source", "avg_pct"))
# Merge in Medicaid expansion data
insurance$expanded_medicaid <- aca_general$state_has_expanded[match(insurance$state, aca_general$state)]
(plot5 <- ggplot(insurance, aes(label = state_abb))
+ geom_bar(aes(x = party_2012, fill = expanded_medicaid), position = "dodge")
+ scale_fill_manual(values = brewer.pal(n = 2, name = "Dark2")[c(2,1)])
+ labs(x = "Party (2012 Winner)", y = "Number of States", fill = "Expanded \nMedicaid")
+ ggtitle("Medicaid Expansion and Party of State")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.5, size = 12)))
plot5
## PREPARATION FOR FURTHER PLOTS (INCLUDING DATA TABLE)
# Want to combine information on insurance coverage with key information on health outcomes/access and affordability
key_indicators <- state_abb_lookup
## Merge in information to the data table on the following
# Demographic Information
# Income level
key_indicators$income_level <- demographics1$income_level[match(key_indicators$state_abb, demographics1$state_abb)]
# Insurance Coverage
# Percentage insured (2015)
key_indicators$insured_pct_2015 <- insurance$insured_pct_2015[match(key_indicators$state_abb, insurance$state_abb)]
# Percentage insured (2014)
key_indicators$insured_pct_2014 <- insurance$insured_pct_2014[match(key_indicators$state_abb, insurance$state_abb)]
# Indicator: Whether state has expanded medicare
key_indicators$state_has_expanded <- aca_general$state_has_expanded[match(key_indicators$state_abb, aca_general$state_abb)]
# Health outcomes and access
# Mortality amenable to health care, deaths per 10000 population
key_indicators$deaths_amenable_2014 <- health_ind$h.deaths_amenable.2014 [match(key_indicators$state_abb, health_ind$state_abb)]
# Years of Potential Life Lost before 75
key_indicators$years_life_lost <- health_ind$h.yrs_lost_potential_life_before75.2014 [match(key_indicators$state_abb, health_ind$state_abb)]
# Adults with a usual source of care (%)
key_indicators$usual_care_2015 <- health_ind$q.with_usual_care_adult.2015 [match(key_indicators$state_abb, health_ind$state_abb)]
# Adults with age/gender-appropriate cancer screenings (%)
key_indicators$with_cancer_screening <- health_ind$q.with_cancer_screening_adult.2014 [match(key_indicators$state_abb, health_ind$state_abb)]
# Adults with age-appropriate vaccines (%)
key_indicators$with_vaccines <- health_ind$q.with_vaccines_adult.2015 [match(key_indicators$state_abb, health_ind$state_abb)]
# Affordability and cost-efficiency
# Individuals under age 65 with high OOP medical costs relative to annual household income
key_indicators$high_OOP_relative <- health_ind$a.high_OOP_relative_under65.2015 [match(key_indicators$state_abb, health_ind$state_abb)]
# Average annual growth in family premiums for employer coverage (between 2010 and 2015)
key_indicators$premium_ann_growth_10_15 <- aca_general$premium_emp_avg_growth_pct_10to15[match(key_indicators$state_abb, aca_general$state_abb)]
# Marketplace consumers who could select a plan for less than $100
key_indicators$IM_plan_under_100 <- aca_general$cov_mkt_under100D_pct[match(key_indicators$state_abb, aca_general$state_abb)]
# Net increase in federal spending (millions)
key_indicators$incr_fed_spending_mil <- aca_general$fed_spending_net_incr_inMil[match(key_indicators$state_abb, aca_general$state_abb)]
## PROCESS PLOT
(ggplot(key_indicators, aes(insured_pct_2014, deaths_amenable_2014))
+ geom_point(aes(color = income_level, shape = state_has_expanded), size = 2)
+ geom_smooth(aes(color = income_level, group = income_level), method = "lm", lwd = 1, se = FALSE)
+ geom_smooth(color = "black", method = "lm", linetype = 2, lwd = 1, se = FALSE)
+ labs(x = "% Insured", y = "Deaths Preventable by Healthcare Intervention \n(per 100,000 People)", color = "Income \nLevel", shape = "State has \nExpanded \nMedicaid")
+ scale_color_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ ggtitle("Relationship Between Avoidable Mortality and \nHealth Insurance Coverage Among States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.5, size = 12)))
## PLOT 6
plot5 <- (ggplot(key_indicators, aes(insured_pct_2014, deaths_amenable_2014))
+ geom_point(aes(color = income_level, shape = state_has_expanded), size = 2)
+ geom_smooth(aes(color = income_level, group = income_level), method = "lm", lwd = 1, se = FALSE)
+ geom_smooth(color = "black", method = "lm", linetype = 2, lwd = 1, se = FALSE)
+ geom_text(aes(label = state_abb), nudge_x = 0.5, check_overlap = TRUE, size = 3)
+ labs(x = "% Insured", y = "Deaths Preventable by Healthcare Intervention \n(per 100,000 People)", color = "Income \nLevel", shape = "State has \nExpanded \nMedicaid")
+ scale_color_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ ggtitle("Relationship Between Avoidable Mortality and \nHealth Insurance Coverage Among States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.5, size = 12)))
plot5
## PLOT 6
plot5 <- (ggplot(key_indicators, aes(insured_pct_2014, deaths_amenable_2014))
+ geom_smooth(aes(color = income_level, group = income_level), method = "lm", lwd = 1, se = FALSE)
+ geom_smooth(color = "black", method = "lm", linetype = 2, lwd = 1, se = FALSE)
+ geom_point(aes(color = income_level, shape = state_has_expanded), size = 2)
+ geom_text(aes(label = state_abb), nudge_x = 0.3, nudge_y = 1, check_overlap = TRUE, size = 2.5, color = "gray30")
+ labs(x = "% Insured", y = "Deaths Preventable by Healthcare Intervention \n(per 100,000 People)", color = "Income \nLevel", shape = "State has \nExpanded \nMedicaid")
+ scale_color_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ ggtitle("Relationship Between Avoidable Mortality and \nHealth Insurance Coverage Among States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.5, size = 12)))
plot5
## DATA PROCESSING FOR MAPS
# Obtain shape files of US states
map_states = map("state", fill = TRUE, plot = FALSE)
# Standardize name format with rest of assignment
# Function to conver to proper case
properCase <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
# Convert to proper case
map_states$state <- sapply(map_states$names, properCase)
# Rename the main component of states with multiple parts in the map
map_states$state[map_states$state == "Massachusetts:main"] <- "Massachusetts"
map_states$state[map_states$state == "Michigan:south"] <- "Michigan"
map_states$state[map_states$state == "New York:main"] <- "New York"
map_states$state[map_states$state == "North Carolina:main"] <- "North Carolina"
map_states$state[map_states$state == "Virginia:main"] <- "Virginia"
map_states$state[map_states$state == "Washington:main"] <- "Washington"
# Match with state abbreviations
map_states$state_abb <- state_abb_lookup$state_abb[match(map_states$state, state_abb_lookup$state)]
# Then strip off all the extra location information for states with multiple parts (leaving just the state name)
for (i in 1:length(map_states$state)) {
map_states$state[i] <- unlist(strsplit(map_states$state[i], ":"))[1]
}
# Get coordinates of state centers
states_centers <- state.center
state.center <- cbind(states_centers, state_abb_lookup)
# Health outcomes: Import key indicators data, matched by state
# Remember to later match information based on state, not state abbreviation (due to how we labelled above)
map_states$deaths_amenable_2014 <- key_indicators$deaths_amenable_2014[match(map_states$state, key_indicators$state)]
map_states$usual_care_2015 <- key_indicators$usual_care_2015[match(map_states$state, key_indicators$state)]
map_states$with_cancer_screening <- key_indicators$with_cancer_screening[match(map_states$state, key_indicators$state)]
map_states$with_vaccines <- key_indicators$with_vaccines[match(map_states$state, key_indicators$state)]
# Cost outcomes: Import key indicators data, matched by state
# Remember to later match information based on state, not state abbreviation (due to how we labelled above)
map_states$high_OOP_relative <- key_indicators$high_OOP_relative[match(map_states$state, key_indicators$state)]
map_states$premium_ann_growth_10_15 <- key_indicators$premium_ann_growth_10_15[match(map_states$state, key_indicators$state)]
map_states$IM_plan_under_100 <- key_indicators$IM_plan_under_100[match(map_states$state, key_indicators$state)]
map_states$incr_fed_spending_mil <- key_indicators$incr_fed_spending_mil[match(map_states$state, key_indicators$state)]
# PROCESS PLOT
(leaflet(map_states) %>%
setView(lat=39.8282, lng=-96 , zoom=4) %>%
addPolygons(color = "#333333", weight = 1, smoothFactor = 0.5, fillOpacity = 0) %>%
addPolygons(group = "Preventable Deaths", fillColor = ~colorNumeric("RdYlGn", -deaths_amenable_2014)(-deaths_amenable_2014), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Preventable Mortality</b>", "<br/>", "<b>per 100,000: </b>", map_states$deaths_amenable_2014)) %>%
addPolygons(group = "Access to Usual Care", fillColor = ~colorNumeric("RdYlGn", usual_care_2015)(usual_care_2015), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Access to Usual</b>", "<br/>", "<b>Source of Care: </b>", map_states$usual_care_2015, "%")) %>%
addPolygons(group = "Cancer Screenings Rate", fillColor = ~colorNumeric("RdYlGn", with_cancer_screening)(with_cancer_screening), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Cancer Screenings</b>", "<br/>", "<b>Rate: </b>", map_states$with_cancer_screening, "%")) %>%
addPolygons(group = "Adult Vaccination Rate", fillColor = ~colorNumeric("RdYlGn", with_vaccines)(with_vaccines), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Vaccination</b>", "<br/>", "<b>Rate: </b>", map_states$with_vaccines, "%")) %>%
addLabelOnlyMarkers(data = filter(state.center, state_abb!="AK" & state_abb!="HI"), lng = ~x, lat = ~y, label = ~state_abb, labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T)) %>%
addLayersControl(
baseGroups = c("Preventable Deaths", "Access to Usual Care", "Cancer Screenings Rate", "Adult Vaccination Rate"),
options = layersControlOptions(collapsed = FALSE)))
## PROCESS PLOT
(leaflet(map_states) %>%
setView(lat=39.8282, lng=-96 , zoom=4) %>%
addPolygons(color = "#333333", weight = 1, smoothFactor = 0.5, fillOpacity = 0) %>%
addPolygons(group = "Preventable Deaths", fillColor = ~colorQuantile("RdYlGn", -deaths_amenable_2014, n = 6)(-deaths_amenable_2014), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Preventable Mortality</b>", "<br/>", "<b>per 100,000: </b>", map_states$deaths_amenable_2014)) %>%
addPolygons(group = "Access to Usual Care", fillColor = ~colorQuantile("RdYlGn", usual_care_2015, n = 6)(usual_care_2015), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Access to Usual</b>", "<br/>", "<b>Source of Care: </b>", map_states$usual_care_2015, "%")) %>%
addPolygons(group = "Cancer Screenings Rate", fillColor = ~colorQuantile("RdYlGn", with_cancer_screening, n = 6)(with_cancer_screening), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Cancer Screenings</b>", "<br/>", "<b>Rate: </b>", map_states$with_cancer_screening, "%")) %>%
addPolygons(group = "Adult Vaccination Rate", fillColor = ~colorQuantile("RdYlGn", with_vaccines, n = 6)(with_vaccines), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Vaccination</b>", "<br/>", "<b>Rate: </b>", map_states$with_vaccines, "%")) %>%
addLabelOnlyMarkers(data = filter(state.center, state_abb!="AK" & state_abb!="HI"), lng = ~x, lat = ~y, label = ~state_abb, labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T)) %>%
addLayersControl(
baseGroups = c("Preventable Deaths", "Access to Usual Care", "Cancer Screenings Rate", "Adult Vaccination Rate"),
options = layersControlOptions(collapsed = FALSE)))
## PLOT 7: LEAFLET MAP - HEALTH OUTCOMES
(leaflet(map_states) %>%
setView(lat=39.8282, lng=-96 , zoom=4) %>%
addPolygons(color = "#333333", weight = 1, smoothFactor = 0.5, fillOpacity = 0) %>%
addPolygons(group = "Preventable Deaths (2014)", fillColor = ~colorQuantile("RdYlGn", -deaths_amenable_2014)(-deaths_amenable_2014), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Preventable Mortality</b>", "<br/>", "<b>per 100,000: </b>", map_states$deaths_amenable_2014)) %>%
addPolygons(group = "Access to Usual Care (2015)", fillColor = ~colorQuantile("RdYlGn", usual_care_2015)(usual_care_2015), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Access to Usual</b>", "<br/>", "<b>Source of Care: </b>", map_states$usual_care_2015, "%")) %>%
addPolygons(group = "Cancer Screenings Rate (2014)", fillColor = ~colorQuantile("RdYlGn", with_cancer_screening)(with_cancer_screening), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Cancer Screenings</b>", "<br/>", "<b>Rate: </b>", map_states$with_cancer_screening, "%")) %>%
addPolygons(group = "Adult Vaccination Rate (2015)", fillColor = ~colorQuantile("RdYlGn", with_vaccines)(with_vaccines), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Vaccination</b>", "<br/>", "<b>Rate: </b>", map_states$with_vaccines, "%")) %>%
addLabelOnlyMarkers(data = filter(state.center, state_abb!="AK" & state_abb!="HI"), lng = ~x, lat = ~y, label = ~state_abb, labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T)) %>%
addLayersControl(
baseGroups = c("Preventable Deaths (2014)", "Access to Usual Care (2015)", "Cancer Screenings Rate (2014)", "Adult Vaccination Rate (2015)"),
options = layersControlOptions(collapsed = FALSE)))
# PROCESS PLOTS
plot10a <- (ggplot(key_indicators, aes(insured_pct_2015, high_OOP_relative))
+ geom_point(aes(color = state_has_expanded))
+ geom_smooth(se = FALSE)
+ theme(legend.position = "none"))
plot10b <- (ggplot(key_indicators, aes(insured_pct_2015, premium_ann_growth_10_15))
+ geom_point(aes(color = state_has_expanded))
+ geom_smooth(se = FALSE)
+ theme(legend.position = "none"))
plot10c <- (ggplot(key_indicators, aes(insured_pct_2015, IM_plan_under_100))
+ geom_point(aes(color = state_has_expanded))
+ geom_smooth(se = FALSE)
+ theme(legend.position = "none"))
grid.arrange(plot10a, plot10b, plot10c, ncol = 3)
plot10 <- (ggplot(key_indicators, aes(insured_pct_2015, high_OOP_relative, label = state_abb))
+ geom_smooth(aes(color = income_level), method = "lm", lwd = 1, se = FALSE)
+ geom_smooth(color = "black", method = "lm", linetype = 2, lwd = 1, se = FALSE)
+ geom_point(aes(color = income_level, shape = state_has_expanded), size = 2)
+ geom_text(aes(label = state_abb), nudge_y = -0.2, check_overlap = TRUE, size = 2.5, color = "gray30")
+ scale_color_manual(values = brewer.pal(n = 4, name = "Dark2"))
+ labs(x = "% Insured", y = "People with High OOP Costs Relative to Household Income", color = "Income \nLevel", shape = "State has \nExpanded \nMedicaid")
+ ggtitle("Relationship Between OOP Costs and Health \nInsurance Coverage Among States")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0.5, size = 12)))
plot10
## PLOT 8: LEAFLET MAP - AFFORDABILITY / COST OUTCOMES
marketplace_pct <- map_states$IM_plan_under_100
marketplace_pct <- marketplace_pct * 100
marketplace_pct[is.na(marketplace_pct)] <- "No State Marketplace"
marketplace_pct_symbol <- ifelse(marketplace_pct=="No State Marketplace", "", "%")
(leaflet(map_states) %>%
setView(lat=39.8282, lng=-96 , zoom=4) %>%
addPolygons(color = "#333333", weight = 1, smoothFactor = 0.5, fillOpacity = 0) %>%
addPolygons(group = "Contained OOP Costs (2015)", fillColor = ~colorQuantile("RdYlGn", -high_OOP_relative)(-high_OOP_relative), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>People with High OOP</b>", "<br/>", "<b>Relative to Income: </b>", map_states$high_OOP_relative, "%")) %>%
addPolygons(group = "Premium Growth Rate (2010-2015)", fillColor = ~colorQuantile("RdYlGn", -premium_ann_growth_10_15)(-premium_ann_growth_10_15), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Annual Premium Growth</b>", "<br/>", "<b>Rate (2010-2015): </b>", map_states$premium_ann_growth_10_15, "%")) %>%
addPolygons(group = "Affordable Marketplace Plan (2017)", fillColor = ~colorQuantile("RdYlGn", IM_plan_under_100)(IM_plan_under_100), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Marketplace Consumers</b>", "<br/>", "<b>Who Can Select Plan</b>", "<br/>","<b>Under $100: </b>", marketplace_pct, marketplace_pct_symbol)) %>%
addPolygons(group = "Increase in Federal Spending (2016)", fillColor = ~colorQuantile("RdYlGn", -incr_fed_spending_mil)(-incr_fed_spending_mil), smoothFactor = 0.5, stroke = FALSE, fillOpacity = 0.6, popup = paste("<b>State: </b>", map_states$state, "<br/>", "<b>Net Increase in Federal</b>", "<br/>", "<b>Spending</b>: $", map_states$incr_fed_spending_mil, "million")) %>%
addLabelOnlyMarkers(data = filter(state.center, state_abb!="AK" & state_abb!="HI"), lng = ~x, lat = ~y, label = ~state_abb, labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T)) %>%
addLayersControl(
baseGroups = c("Contained OOP Costs (2015)", "Premium Growth Rate (2010-2015)", "Affordable Marketplace Plan (2017)", "Increase in Federal Spending (2016)"),
options = layersControlOptions(collapsed = FALSE)))
# Create data table reporting values
data_table_values <- key_indicators[ , c("state", "insured_pct_2015", "deaths_amenable_2014", "usual_care_2015", "high_OOP_relative", "premium_ann_growth_10_15", "incr_fed_spending_mil")]
# Create data table reporting rank
data_table_rank <- data_table_values[ , c("state", "insured_pct_2015", "deaths_amenable_2014", "usual_care_2015", "high_OOP_relative", "premium_ann_growth_10_15")]
# Convert each function to rank
# Rank 1 is always more favorable (regardless of definition of variable)
data_table_rank$r_insured_pct_2015 <- rank(-data_table_values$insured_pct_2015, na.last = "keep", ties.method = "min")
data_table_rank$r_deaths_amenable_2014 <- rank(data_table_values$deaths_amenable_2014, na.last = "keep", ties.method = "min")
data_table_rank$r_usual_care_2015 <- rank(-data_table_values$usual_care_2015, na.last = "keep", ties.method = "min")
data_table_rank$r_high_OOP_relative <- rank(data_table_values$high_OOP_relative, na.last = "keep", ties.method = "min")
data_table_rank$r_premium_ann_growth_10_15 <- rank(data_table_values$premium_ann_growth_10_15, na.last = "keep", ties.method = "min")
data_table_rank$r_incr_fed_spending_mil <- rank(data_table_values$incr_fed_spending_mil, na.last = "keep", ties.method = "min")
# Remove value variables
data_table_rank$insured_pct_2015 <- NULL
data_table_rank$deaths_amenable_2014 <- NULL
data_table_rank$usual_care_2015 <- NULL
data_table_rank$high_OOP_relative <- NULL
data_table_rank$premium_ann_growth_10_15 <- NULL
data_table_rank$incr_fed_spending_mil <- NULL
## PROCESS PLOT
datatable(data_table_values, rownames = FALSE, colnames = c("State", "Percentage Insured", "Preventable Deaths Per 100,000", "Usual Care Access (%)", "High OOP Relative to Income", "Annual Premium Growth", "Increase in Federal Spending ($M)"), caption = "Performance of the 50 States in Insurance Coverage and Health Outcomes")
## DATA TABLE RANKING STATES ON VARIOUS MEASURES
datatable(data_table_rank, rownames = FALSE, colnames = c("State", "Percentage Insured", "Fewer Preventable Deaths", "Usual Care Access", "OOP Contained", "Lower Annual Premium Growth", "Lower Increase in Federal Spending"), caption = "Rank of the 50 States in Insurance Coverage and Health Outcomes")
# Compute overall ranking of states by each of three measures
data_table_rank_cat <- data_table_rank
# Insurance coverage
data_table_rank_cat$insurance_rank <- data_table_rank$r_insured_pct_2015
# Health
data_table_rank_cat$health_rank_sum <- data_table_rank$r_deaths_amenable_2014 + data_table_rank$r_usual_care_2015
data_table_rank_cat$health_rank <- rank(data_table_rank_cat$health_rank_sum, na.last = "keep", ties.method = "min")
# Finance
data_table_rank_cat$cost_rank_sum <- data_table_rank$r_high_OOP_relative + data_table_rank$r_premium_ann_growth_10_15 + data_table_rank$r_incr_fed_spending_mil
data_table_rank_cat$cost_rank <- rank(data_table_rank_cat$cost_rank_sum, na.last = "keep", ties.method = "min")
data_table_rank_cat <- data_table_rank_cat[ , c("state", "insurance_rank", "health_rank", "cost_rank")]
data_table_rank_cat$sum_of_ranks <- data_table_rank_cat$insurance_rank + data_table_rank_cat$health_rank + data_table_rank_cat$cost_rank
data_table_rank_cat_long <- data_table_rank_cat
data_table_rank_cat_long <- reshape(data_table_rank_cat,
varying = c("insurance_rank", "health_rank", "cost_rank"),
v.names = "Rank",
timevar = "Category",
times = c("Insurance", "Health", "Cost"),
new.row.names = 1:1000,
direction = "long")
plot11 <- (ggplot(data_table_rank_cat_long, aes(x = reorder(state, -sum_of_ranks), y = Rank, fill = Category))
+ geom_col(position = "stack")
+ coord_flip()
+ labs(x = "", y = "", fill = "Rank \nCriteria")
+ scale_fill_manual(values = brewer.pal(n = 3, name = "Set2"))
+ ggtitle("Overall Ranking of States Performance")
+ theme_minimal()
+ theme(plot.title = element_text(face="bold", hjust = 0, size = 12),
axis.text.y = element_text(size = 6.5),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()))
ggplotly(plot11, tooltip = c("Rank", "Category"))
library(tm)
library(tm.plugin.lexisnexis)
library(readxl)
library(gtools)  # for smartbind
library(dplyr)   # for data_frame
library(lubridate)   # for date formatting
library(stringr)
library(tools)  # Title case
library(quanteda)
library(ggplot2)
library(quanteda)
library(stringr)
library(tm)
library(qdap)
library(SnowballC)
library(dplyr)
library(tidytext)
library(wordcloud)
# Combine CSV and HTML Files
data <- read_excel("LexisNexis/NYTimes_Metadata.xlsx")
shiny::runApp('~/Documents/*6_Data Science/QMSS G4063 Data Visualization/Final Project/R code/Health_Insurance_Shiny')
